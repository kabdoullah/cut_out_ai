import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';

enum ConnectivityStatus { connected, disconnected, checking }

class ConnectivityService {
  final Connectivity _connectivity = Connectivity();
  final InternetConnectionChecker _connectionChecker =
      InternetConnectionChecker.instance;

  StreamController<ConnectivityStatus>? _controller;
  StreamSubscription<List<ConnectivityResult>>? _connectivitySubscription;
  StreamSubscription<InternetConnectionStatus>? _internetSubscription;

  ConnectivityStatus _lastStatus = ConnectivityStatus.checking;

  // Stream pour √©couter les changements de connexion
  Stream<ConnectivityStatus> get connectivityStream {
    _controller ??= StreamController<ConnectivityStatus>.broadcast();
    return _controller!.stream;
  }

  // √âtat actuel de la connexion
  ConnectivityStatus get currentStatus => _lastStatus;

  // Initialiser le service
  void initialize() {
    // V√©rifier la connexion au d√©marrage
    _checkInitialConnection();

    // √âcouter les changements de connectivit√© (WiFi, Mobile, etc.)
    _connectivitySubscription = _connectivity.onConnectivityChanged.listen((
      List<ConnectivityResult> results,
    ) {
      _handleConnectivityChange(results);
    });

    // √âcouter les changements de connexion internet r√©elle
    _internetSubscription = _connectionChecker.onStatusChange.listen((
      InternetConnectionStatus status,
    ) {
      _handleInternetStatusChange(status);
    });
  }

  Future<void> _checkInitialConnection() async {
    try {
      final bool hasInternet = await _connectionChecker.hasConnection;
      final ConnectivityStatus status = hasInternet
          ? ConnectivityStatus.connected
          : ConnectivityStatus.disconnected;

      _updateStatus(status);
    } catch (e) {
      print('‚ùå Erreur v√©rification connexion initiale: $e');
      _updateStatus(ConnectivityStatus.disconnected);
    }
  }

  void _handleConnectivityChange(List<ConnectivityResult> results) {
    print('üì° Changement connectivit√©: $results');

    // Si aucune connectivit√©, on est d√©connect√©
    if (results.contains(ConnectivityResult.none)) {
      _updateStatus(ConnectivityStatus.disconnected);
      return;
    }

    // Sinon, v√©rifier la connexion internet r√©elle
    _verifyInternetConnection();
  }

  void _handleInternetStatusChange(InternetConnectionStatus status) {
    print('üåê Changement internet: $status');

    final ConnectivityStatus newStatus =
        status == InternetConnectionStatus.connected
        ? ConnectivityStatus.connected
        : ConnectivityStatus.disconnected;

    _updateStatus(newStatus);
  }

  Future<void> _verifyInternetConnection() async {
    _updateStatus(ConnectivityStatus.checking);

    try {
      final bool hasInternet = await _connectionChecker.hasConnection;
      final ConnectivityStatus status = hasInternet
          ? ConnectivityStatus.connected
          : ConnectivityStatus.disconnected;

      _updateStatus(status);
    } catch (e) {
      print('‚ùå Erreur v√©rification internet: $e');
      _updateStatus(ConnectivityStatus.disconnected);
    }
  }

  void _updateStatus(ConnectivityStatus status) {
    if (_lastStatus != status) {
      _lastStatus = status;
      _controller?.add(status);

      print('üìä Statut connexion: ${_getStatusString(status)}');
    }
  }

  String _getStatusString(ConnectivityStatus status) {
    switch (status) {
      case ConnectivityStatus.connected:
        return '‚úÖ Connect√©';
      case ConnectivityStatus.disconnected:
        return '‚ùå D√©connect√©';
      case ConnectivityStatus.checking:
        return 'üîÑ V√©rification...';
    }
  }

  // V√©rifier manuellement la connexion
  Future<bool> checkConnection() async {
    try {
      _updateStatus(ConnectivityStatus.checking);
      final bool hasInternet = await _connectionChecker.hasConnection;

      final ConnectivityStatus status = hasInternet
          ? ConnectivityStatus.connected
          : ConnectivityStatus.disconnected;

      _updateStatus(status);
      return hasInternet;
    } catch (e) {
      print('‚ùå Erreur check connexion: $e');
      _updateStatus(ConnectivityStatus.disconnected);
      return false;
    }
  }

  // Obtenir les d√©tails de connexion
  Future<Map<String, dynamic>> getConnectionDetails() async {
    try {
      final connectivityResults = await _connectivity.checkConnectivity();
      final hasInternet = await _connectionChecker.hasConnection;

      return {
        'hasInternet': hasInternet,
        'connectivityType': connectivityResults,
        'status': _lastStatus,
        'lastCheck': DateTime.now().toIso8601String(),
      };
    } catch (e) {
      return {
        'hasInternet': false,
        'connectivityType': [ConnectivityResult.none],
        'status': ConnectivityStatus.disconnected,
        'error': e.toString(),
        'lastCheck': DateTime.now().toIso8601String(),
      };
    }
  }

  // Nettoyer les ressources
  void dispose() {
    _connectivitySubscription?.cancel();
    _internetSubscription?.cancel();
    _controller?.close();
    _controller = null;
  }
}
