import 'dart:io';
import 'dart:typed_data';
import 'package:gal/gal.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:device_info_plus/device_info_plus.dart';

class GalleryService {

  // Sauvegarder une image dans la galerie syst√®me
  static Future<bool> saveImageToGallery(String imagePath, {String? albumName}) async {
    try {
      // 1. V√©rifier les permissions
      final hasPermission = await _checkStoragePermission();
      if (!hasPermission) {
        throw GalleryException('Permission de stockage refus√©e');
      }

      // 2. V√©rifier que le fichier existe
      final file = File(imagePath);
      if (!file.existsSync()) {
        throw GalleryException('Fichier image introuvable: $imagePath');
      }

      // 3. Sauvegarder avec Gal (plus moderne et maintenu)
      await Gal.putImage(imagePath, album: albumName ?? 'CutOut AI');

      print('üì∏ Image sauvegard√©e avec succ√®s dans la galerie');
      return true;

    } catch (e) {
      print('‚ùå Erreur sauvegarde galerie: $e');
      if (e is GalleryException) {
        rethrow;
      } else {
        throw GalleryException('Erreur inattendue: $e');
      }
    }
  }

  // Sauvegarder des bytes directement
  static Future<bool> saveImageBytesToGallery(Uint8List imageBytes, {String? name}) async {
    try {
      // 1. V√©rifier les permissions
      final hasPermission = await _checkStoragePermission();
      if (!hasPermission) {
        throw GalleryException('Permission de stockage refus√©e');
      }

      // 2. Cr√©er un fichier temporaire
      final tempFile = await _createTempFile(imageBytes, name);

      // 3. Sauvegarder avec Gal
      await Gal.putImage(tempFile.path, album: 'CutOut AI');

      // 4. Nettoyer le fichier temporaire
      await tempFile.delete();

      print('üì∏ Image (bytes) sauvegard√©e avec succ√®s dans la galerie');
      return true;

    } catch (e) {
      print('‚ùå Erreur sauvegarde galerie (bytes): $e');
      if (e is GalleryException) {
        rethrow;
      } else {
        throw GalleryException('Erreur inattendue: $e');
      }
    }
  }

  // Cr√©er un fichier temporaire pour les bytes
  static Future<File> _createTempFile(Uint8List imageBytes, String? name) async {
    final tempDir = Directory.systemTemp;
    final fileName = name ?? _generateImageName();
    final tempFile = File('${tempDir.path}/$fileName.png');

    await tempFile.writeAsBytes(imageBytes);
    return tempFile;
  }

  // V√©rifier et demander les permissions de stockage - AVEC device_info_plus et Gal
  static Future<bool> _checkStoragePermission() async {
    try {
      // 1. D'abord essayer avec Gal (m√©thode recommand√©e)
      final hasGalAccess = await Gal.hasAccess();
      if (hasGalAccess) {
        print('‚úÖ Acc√®s galerie d√©j√† accord√© via Gal');
        return true;
      }

      print('üì± Demande d\'acc√®s galerie via Gal...');
      final galAccessGranted = await Gal.requestAccess();
      if (galAccessGranted) {
        print('‚úÖ Acc√®s galerie accord√© via Gal');
        return true;
      }

      // 2. Si Gal √©choue, utiliser permission_handler comme fallback
      print('‚ö†Ô∏è Gal n\'a pas pu obtenir l\'acc√®s, fallback vers permission_handler');
      
      if (Platform.isAndroid) {
        final deviceInfo = DeviceInfoPlugin();
        final androidInfo = await deviceInfo.androidInfo;
        final sdkInt = androidInfo.version.sdkInt;

        print('üì± Version Android d√©tect√©e: API $sdkInt');

        if (sdkInt >= 33) {
          // Android 13+ (API 33+) : Permission photos
          print('üì± Android 13+ d√©tect√© - Utilisation permission photos');
          return await _requestAndroidPhotosPermission();
        } else {
          // Android < 13 : Permission storage
          print('üì± Android < 13 d√©tect√© - Utilisation permission storage');
          return await _requestAndroidStoragePermission();
        }

      } else if (Platform.isIOS) {
        // iOS : Permission photos
        print('üì± iOS d√©tect√© - Utilisation permission photos');
        return await _requestIOSPhotosPermission();
      }

      return false;
    } catch (e) {
      print('‚ùå Erreur permissions stockage: $e');
      // Dernier fallback : essayer storage directement
      return await _requestAndroidStoragePermission();
    }
  }

  // Demander permission photos sur Android 13+
  static Future<bool> _requestAndroidPhotosPermission() async {
    final status = await Permission.photos.status;
    
    if (status.isGranted) {
      return true;
    } else if (status.isDenied) {
      final newStatus = await Permission.photos.request();
      if (newStatus.isGranted) {
        return true;
      } else if (newStatus.isPermanentlyDenied) {
        print('‚ùå Permission photos refus√©e d√©finitivement - Redirection vers param√®tres');
        throw GalleryException('Permission refus√©e d√©finitivement. Allez dans Param√®tres > Applications > CutOut AI > Autorisations pour activer l\'acc√®s aux photos.');
      } else {
        print('‚ùå Permission photos refus√©e');
        throw GalleryException('Permission d\'acc√®s aux photos refus√©e');
      }
    } else if (status.isPermanentlyDenied) {
      print('‚ùå Permission photos refus√©e d√©finitivement - Redirection vers param√®tres');
      throw GalleryException('Permission refus√©e d√©finitivement. Allez dans Param√®tres > Applications > CutOut AI > Autorisations pour activer l\'acc√®s aux photos.');
    }
    
    return false;
  }

  // Demander permission storage sur Android < 13
  static Future<bool> _requestAndroidStoragePermission() async {
    final status = await Permission.storage.status;
    
    if (status.isGranted) {
      return true;
    } else if (status.isDenied) {
      final newStatus = await Permission.storage.request();
      if (newStatus.isGranted) {
        return true;
      } else if (newStatus.isPermanentlyDenied) {
        print('‚ùå Permission storage refus√©e d√©finitivement - Redirection vers param√®tres');
        throw GalleryException('Permission refus√©e d√©finitivement. Allez dans Param√®tres > Applications > CutOut AI > Autorisations pour activer l\'acc√®s au stockage.');
      } else {
        print('‚ùå Permission storage refus√©e');
        throw GalleryException('Permission d\'acc√®s au stockage refus√©e');
      }
    } else if (status.isPermanentlyDenied) {
      print('‚ùå Permission storage refus√©e d√©finitivement - Redirection vers param√®tres');
      throw GalleryException('Permission refus√©e d√©finitivement. Allez dans Param√®tres > Applications > CutOut AI > Autorisations pour activer l\'acc√®s au stockage.');
    }
    
    return false;
  }

  // Demander permission photos sur iOS
  static Future<bool> _requestIOSPhotosPermission() async {
    final status = await Permission.photos.status;
    
    if (status.isGranted) {
      return true;
    } else if (status.isDenied) {
      final newStatus = await Permission.photos.request();
      if (newStatus.isGranted) {
        return true;
      } else if (newStatus.isPermanentlyDenied) {
        print('‚ùå Permission photos iOS refus√©e d√©finitivement - Redirection vers param√®tres');
        throw GalleryException('Permission refus√©e d√©finitivement. Allez dans R√©glages > Confidentialit√© > Photos pour autoriser CutOut AI.');
      } else {
        print('‚ùå Permission photos iOS refus√©e');
        throw GalleryException('Permission d\'acc√®s aux photos refus√©e');
      }
    } else if (status.isPermanentlyDenied) {
      print('‚ùå Permission photos iOS refus√©e d√©finitivement - Redirection vers param√®tres');
      throw GalleryException('Permission refus√©e d√©finitivement. Allez dans R√©glages > Confidentialit√© > Photos pour autoriser CutOut AI.');
    }
    
    return false;
  }

  // Obtenir la version Android avec device_info_plus
  static Future<int> _getAndroidVersion() async {
    try {
      if (Platform.isAndroid) {
        final deviceInfo = DeviceInfoPlugin();
        final androidInfo = await deviceInfo.androidInfo;
        return androidInfo.version.sdkInt;
      }
      return 0;
    } catch (e) {
      print('‚ùå Erreur obtention version Android: $e');
      return 30; // Fallback vers Android 11
    }
  }

  // G√©n√©rer un nom unique pour l'image
  static String _generateImageName() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    return 'CutOutAI_$timestamp';
  }

  // Obtenir le chemin de sauvegarde (pour info)
  static Future<String?> getGalleryPath() async {
    try {
      // Avec Gal, on ne peut pas obtenir le chemin exact
      // mais on peut v√©rifier si Gal est disponible
      final hasAccess = await Gal.hasAccess();
      return hasAccess ? 'Galerie syst√®me' : null;
    } catch (e) {
      print('‚ùå Impossible de v√©rifier l\'acc√®s galerie: $e');
      return null;
    }
  }

  // V√©rifier si l'acc√®s √† la galerie est disponible
  static Future<bool> hasGalleryAccess() async {
    try {
      return await Gal.hasAccess();
    } catch (e) {
      print('‚ùå Erreur v√©rification acc√®s galerie: $e');
      return false;
    }
  }

  // Demander l'acc√®s √† la galerie
  static Future<bool> requestGalleryAccess() async {
    try {
      return await Gal.requestAccess();
    } catch (e) {
      print('‚ùå Erreur demande acc√®s galerie: $e');
      return false;
    }
  }
}

// Exception personnalis√©e pour la galerie
class GalleryException implements Exception {
  final String message;
  const GalleryException(this.message);

  @override
  String toString() => message;
}